// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.administration.v1alpha1;

option go_package = "github.com/drud/admin-api/gen/live/administration/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.administration.v1alpha1";

// TODO: This should be a part of org operator?

message Workspace {

    /*
    `OutputOnly`
    Workspace Name.
    */
    string name = 1;

    // `OutputOnly` - Workspace ID.
    // string id = 2;

    /*
    `OutputOnly`
    Administrators of the workspace
    */
    repeated string admins = 2;
    
    /*
    `OutputOnly`
    Developers in the workspace
    */
    repeated string developers = 3;

    /*
    `OutputOnly`
    The subscription in which this workspace belongs
    */
    string subscription = 4;
}

message CreateWorkspaceRequest {

    string subscription = 1;

    string name = 2;
}

message CreateWorkspaceResponse {
    Workspace workspace = 1;
}

message DeleteWorkspaceRequest {
    // The name of the workspace to delete
    string name = 1;
}

message DeleteWorkspaceResponse {
}


message ListWorkspaceRequest {
    
    /*
    Defines the scope of the request.  If the scope is set to ADMIN the response will contain only workspaces where the provided token user is an administrator.
    If the request is set to DEVELOPER the response will contain any workspace where the provided token user is an administrator or a developer.
    */
    enum ListWorkspaceScope {
        DEVELOPER = 0;
        ADMIN = 1;
    }

    /*
    `Optional`
    The scope of the list request.  Defaults to `ListWorkspaceScope.DEVELOPER`.
    */
    ListWorkspaceScope Scope = 1;
}

message ListWorkspaceResponse {
    
    // `OutputOnly` - A workspace for the current user
    repeated Workspace workspaces = 1;
}

message AddWorkspaceAdminRequest {

    /*
    `Required`
    The name of the workspace to add this administrator to.
    */
    string workspace = 1;

    /*
    `Required`
    The email of the workspace administrator
    */
    string email = 2;
}

message AddWorkspaceAdminResponse {
    /*
    `OutputOnly`
    The updated workspace resource.
    */
    Workspace workspace = 1;
}

message AddWorkspaceDeveloperRequest {

    /*
    `Required`
    The name of the workspace to add this developer to.
    */
    string workspace = 1;

    /*
    `Required`
    The email of the workspace developer.
    */
    string email = 2;
}

message AddWorkspaceDeveloperResponse {
    /*
    `OutputOnly`
    The updated workspace resource.
    */
    Workspace workspace = 1;
}

message DeleteWorkspaceAdminRequest {

    /*
    `Required`
    The name of the workspace to remove this administrator from.
    */
    string workspace = 1;

    /*
    `Required`
    The email of the workspace administrator.
    */
    string email = 2;
}

message DeleteWorkspaceAdminResponse {

    /*
    `OutputOnly`
    The updated workspace resource.
    */
    Workspace workspace = 1;
}

message DeleteWorkspaceDeveloperRequest {

    /*
    `Required`
    The name of the workspace to remove this developer from.
    */
    string workspace = 1;
    
    /*
    `Required`
    The email of the workspace developer.
    */
    string email = 2;
}

message DeleteWorkspaceDeveloperResponse {

    /*
    `OutputOnly`
    The updated workspace resource.
    */
    Workspace workspace = 1;
}