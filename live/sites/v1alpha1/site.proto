// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.sites.v1alpha1;

option go_package = "github.com/drud/site-api/gen/live/sites/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.sites.v1alpha1";


enum SiteType {
    DRUPAL = 0;
    TYPO3 = 1;
    WORDPRESS = 2;
}

message GitRepository {
  /*
  `Required`
  The URL of the repository
  */
  string url = 1;

  /*
  `Required`
  The branch, tag, or commit.  Default: `master`.
  */
  string ref = 2;
}

// Cron manages if and when the CMS cron executes
message Cron {

  /*
  `Optional`
  Disabled will stop the CMS cron from executing.  Default true.
  */
  bool disabled = 1;
 
  /*
  Schedule specifies when this process will execute using CronTab notation.
  */
  string schedule = 2;
}

/*
A site of SiteType.DRUPAL
*/
message DrupalSite {

  /*
  `OutputOnly`
  The workspace of the site
  */
  string workspace = 1;

  /*
  `OutputOnly`
  The name of the site
  */
  string name = 2;

  /*
  `OutputOnly`
  */
  oneof Repository {
    GitRepository git = 3;
  }

  /*
  `OutputOnly`
  */
  DrupalSiteOptions options = 17;
}

/*
A site of SiteType.WORDPRESS
*/
message WordpressSite {

  /*
  `OutputOnly`
  The workspace of the site
  */
  string workspace = 1;

  /*
  `OutputOnly`
  The name of the site
  */
  string name = 2;

  /*
  `OutputOnly`
  */
  oneof Repository {
    GitRepository git = 3;
  }

  /*
  `OutputOnly`
  */
  WordpressSiteOptions options = 17;
}

/*
A site of SiteType.TYPO3
*/
message Typo3Site {

  /*
  `OutputOnly`
  The workspace of the site
  */
  string workspace = 1;

  /*
  `OutputOnly`
  The name of the site
  */
  string name = 2;

  /*
  `OutputOnly`
  */
  oneof Repository {
    GitRepository git = 3;
  }

  /*
  `OutputOnly`
  */
  Typo3SiteOptions options = 17;
}

message Site {

  // because you cannot use repeated oneof we must wrap oneof in a repeatable message

  oneof properties {
    DrupalSite drupal = 1;
    Typo3Site typo3 = 2;
    WordpressSite wordpress = 3;
  }
}

message DrupalSiteOptions {
  
  /*
  `Optional`
  Specify the version of TYPO3 used for the site (default "9")
  */
  string version = 18;

  /*
  `Optional`
  Whether to run composer install when creating the site image
  */
  bool composerInstall = 19;

  /*
  `Optional`
  If `composerInstall` is set, use this flags to specify which args are passed to composer install
  */
  repeated string composerArgs = 20;

  /*
  `Optional`
  */
  Cron cron = 21;

  /*
  `Optional`
  The relative docroot of the site, like 'docroot' or 'htdocs' or 'web'. Defaults to empty, the repository's root directory.
  */
  string DocRoot = 22;
  
  /*
  `Optional`
  A list of persistent mount paths relative to docroot (ex. content/uploads). 
  Defaults to "sites/default/files","/var/www/drupal-private/","sites/default/files/config/sync"
  */
  repeated string persistentPaths = 23;

  /*
  `Optional`
  A list of ephemeral mount paths relative to docroot
  */
  repeated string ephemeralPaths = 24;
}

message WordpressSiteOptions {
  
  /*
  `Optional`
  Specify the version of TYPO3 used for the site (default "9")
  */
  string version = 18;

  /*
  `Optional`
  Whether to run composer install when creating the site image
  */
  bool composerInstall = 19;

  /*
  `Optional`
  If `composerInstall` is set, use this flags to specify which args are passed to composer install
  */
  repeated string composerArgs = 20;

  /*
  `Optional`
  */
  Cron cron = 21;

  /*
  `Optional`
  The relative docroot of the site, like 'docroot' or 'htdocs' or 'web'. Defaults to empty, the repository's root directory.
  */
  string DocRoot = 22;
  
  /*
  `Optional`
  A list of persistent mount paths relative to docroot (ex. content/uploads)
  */
  repeated string persistentPaths = 23;

  /*
  `Optional`
  A list of ephemeral mount paths relative to docroot
  */
  repeated string ephemeralPaths = 24;
}

message Typo3SiteOptions {
  
  /*
  `Optional`
  Specify the version of TYPO3 used for the site (default "9")
  */
  string version = 18;

  /*
  `Optional`
  Whether to run composer install when creating the site image
  */
  bool composerInstall = 19;

  /*
  `Optional`
  If `composerInstall` is set, use this flags to specify which args are passed to composer install
  */
  repeated string composerArgs = 20;

  /*
  `Optional`
  */
  Cron cron = 21;

  /*
  `Optional`
  The relative docroot of the site, like 'docroot' or 'htdocs' or 'web'. Defaults to empty, the repository's root directory.
  */
  string DocRoot = 22;
  
  /*
  `Optional`
  A list of persistent mount paths relative to docroot (ex. content/uploads). 
  */
  repeated string persistentPaths = 23;

  /*
  `Optional`
  A list of ephemeral mount paths relative to docroot
  */
  repeated string ephemeralPaths = 24;
}

message CreateSiteRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;

  /*
  `Required`
  */
  oneof Repository {
    GitRepository git = 2;
  }

  oneof options {
    DrupalSiteOptions drupal = 17;
    WordpressSiteOptions wordpress = 18;
    Typo3SiteOptions typo3 = 19;
  }
}

/*
*/
message CreateSiteResponse {

  /*
  `OutputOnly`
  The properties of the site which was created.
  */
  Site site = 1;
}

/*
*/
message GetSiteRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;
  
  /*
  `Required`
  The type of site being retrieved
  */
  SiteType type = 2;
}

/*
*/
message GetSiteResponse {

  /*
  `OutputOnly`
  The requested site.
  */
  Site site = 1;
}

/*
*/
message ListSiteRequest {
}

/*
*/
message ListSiteResponse {

  /*
  `OutputOnly`
  A list of sites.
  */
  repeated Site sites = 1;
}

/*
*/
message UpdateSiteRequest {

  /*
  */
}

/*
*/
message UpdateSiteResponse {

  /*
  */
}

/*
*/
message DeleteSiteRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;

  /*
  `Required`
  The type of site being deleted
  */
  SiteType type = 2;
}

/*
*/
message DeleteSiteResponse {

  /*
  `OutputOnly`
  The name of the site
  */
  Site site = 1;
}

message LogOptions {
  /*
  `Optional`
  Continues to follow and send logs until the maximum allotted connection time has been reached.
  Defaults to false.
  */
  bool follow = 1;

  /*
  `Optional`
  The approximate number of bytes to return from the message.
  */
  int64 limitBytes = 2;

  /*
  `Optional`
  Retrieves the logs for a previously terminated run of the site
  */
  bool previous = 3;

  /*
  `Optional`
  The number of seconds from now to retrieve logs
  */
  int64 sinceSeconds = 4;

  /*
  `Optional`
  An RFC3999 formatted timestamp to start retrieving logs from
  */
  string sinceTime = 5;

  /*
  `Optional`
  The number of lines to retrieve at the tail end of a log
  */
  int64 taillines = 6;

  /*
  `Optional`
  Will prepend RFC3999 timestamps at the beginning of each log line
  */
  bool timestamps = 7;
}

/*
*/
message SiteLogsRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;

  /*
  `Required`
  The type of site being deleted
  */
  SiteType type = 2;

  /*
  `Optional`
  Additional options for logging
  */
  LogOptions options = 17;

}

/*
*/
message SiteLogsResponse {

  /*
  TODO
  */
  bytes content = 1;
}

/*
*/
message AccessLogsRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;

  /*
  `Required`
  The type of site being deleted
  */
  SiteType type = 2;

  /*
  `Optional`
  Additional options for logging
  */
  LogOptions options = 17;
}

/*
*/
message AccessLogsResponse {

  /*
  TODO
  */
  bytes content = 1;
}

/*
*/
message MysqlLogsRequest {

  /*
  `Required`
  The name of the site
  */
  string name = 1;

  /*
  `Required`
  The type of site being deleted
  */
  SiteType type = 2;

  /*
  `Optional`
  Continues to follow and send logs until the maximum allotted connection time has been reached
  */
  bool follow = 17;
}

/*
*/
message MysqlLogsResponse {

  /*
  TODO
  */
  bytes content = 1;
}

/*
*/
message SiteExecRequest {

  /*
  */
  string name = 1;

  /*
  */
  repeated string command = 2;

  /*
  */
  bool quiet = 17;
}

/*
TODO:
*/
message SiteExecResponse {

  /*
  TODO
  */
  bytes stdout = 1;

  /*
  TODO
  */
  bytes stderr = 2;
}