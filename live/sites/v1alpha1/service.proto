// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.sites.v1alpha1;

import "live/sites/v1alpha1/database.proto";
import "live/sites/v1alpha1/file.proto";
import "live/sites/v1alpha1/site.proto";

option go_package = "github.com/drud/site-api/gen/live/sites/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.sites.v1alpha1";

/*
The Sites service provides site level functions inside a users ddev-live workspace.
To access the sites service consumers will have to initialize an authenticated client.  This requires
several metadata to be passed to the client.

`x-auth-token` which is a authentication token for the call.  This will be required to be a temporary token issued by the BillingAPI.

`x-ddev-workspace` which is the workspace for all procedures.  For example a client request `ListSites` will list all sites in the workspace whose value is derived from the key `x-ddev-workspace`.
*/
service Sites {

    // Sites

    /*
    CreateSite creates one of the supported site types
    */
    rpc CreateSite(CreateSiteRequest) returns (CreateSiteResponse) {
    }

    /*
    GetSite returns the state of a site by name
    */
    rpc GetSite(GetSiteRequest) returns (GetSiteResponse) {
    }

    /*
    ListSites returns all sites within a workspace
    */
    rpc ListSites(ListSiteRequest) returns (ListSiteResponse) {
    }

    /*
    ListSiteStream returns all sites within a workspace and watches for any new sites or updates to previously returned sites
    */
    rpc ListSiteStream(ListSiteStreamRequest) returns (stream ListSiteStreamResponse) {
    }

    /*
    */
    rpc UpdateSite(UpdateSiteRequest) returns (UpdateSiteResponse) {
    }

    /*
    */
    rpc DeleteSite(DeleteSiteRequest) returns (DeleteSiteResponse) {
    }

    /*
    SiteLogStream returns a stream of logs for a site
    */
    rpc SiteLogStream(SiteLogsRequest) returns (stream SiteLogsResponse) {

    }

    /*
    AccessLogStream returns a stream of access logs for a site
    */
    rpc AccessLogStream(AccessLogsRequest) returns (stream AccessLogsResponse) {

    }

    /*
    MysqlLogStream returns a stream of access logs for a site
    */
    rpc MysqlLogStream(MysqlLogsRequest) returns (stream MysqlLogsResponse) {

    }


    /*
    BuildLogStream returns a stream of build logs for a site
    */
    rpc BuildLogStream(BuildLogsRequest) returns (stream BuildLogsResponse) {

    }

    /*
    SiteExecStream allows for the streaming execution of commands inside a site container
    */
    rpc SiteExecStream(stream SiteExecRequest) returns (stream SiteExecResponse) {

    }

    // Site Clones

    /*
    CloneSite creates a clone of already existing site 
    */
    rpc CloneSite(CloneRequest) returns (CloneResponse) {
    }

    /*
    DescribeClone describes the status of an in progress clone operation
    */
    rpc DescribeClone(DescribeCloneRequest) returns (DescribeCloneResponse) {
    }
    
    /*
    ListCloneSiteOperations lists all clone site operations
    */
    rpc ListCloneSiteOperations(ListCloneSiteOperationsRequest) returns (ListCloneSiteOperationsResponse) {
    }
    
    /*
    ListClonesForSite lists all clones for a particular origin site
    */
    rpc ListClonesForSite(ListClonesForSiteRequest) returns (ListClonesForSiteResponse) {
    }

    /*
    DeleteClone removes a clone resource and any children of that clone resource
    */
    rpc DeleteClone(DeleteCloneRequest) returns (DeleteCloneResponse) {
    }

    // Databases

    /*
    BackupDatabase backs up a database associated with a site
    */
    rpc BackupDatabase(BackupDatabaseRequest) returns (BackupDatabaseResponse) {
    }

    /*
    RestoreDatabase restores a sites databases to a known backup
    */
    rpc RestoreDatabase(RestoreDatabaseRequest) returns (RestoreDatabaseResponse) {
    }

    /*
    PushDatabaseBackup creates a new backup for a site and attempts to restore the site to that backup
    */
    rpc PushDatabaseBackup(PushDatabaseBackupRequest) returns (PushDatabaseBackupResponse) {
    }

    /*
    PushDatabaseBackupStream creates a new backup for a site and attempts to restore the site to that backup
    */
    rpc PushDatabaseBackupStream(stream PushDatabaseBackupRequest) returns (PushDatabaseBackupResponse) {
    }

    /*
    PullDatabase pulls down a database backup locally
    */
    rpc PullDatabaseBackup(PullDatabaseBackupRequest) returns (PullDatabaseBackupResponse) {
    }

    /*
    PullDatabaseBackupStream pulls down a database backup locally
    */
    rpc PullDatabaseBackupStream(PullDatabaseBackupRequest) returns (stream PullDatabaseBackupResponse) {
    }

    /*
    Lists database backups known for a provided site
    */
    rpc ListDatabaseBackups(ListDatabaseBackupsRequest) returns (ListDatabaseBackupsResponse) {
    }

    // Files

    /*
    BackupFiles backups up a currently running site environment to the staging area 
    */
    rpc BackupFiles(BackupFilesRequest) returns (BackupFilesResponse) {
    }

    /*
    RestoreFiles restores the current staging area to a sites environment
    */
    rpc RestoreFiles(RestoreFilesRequest) returns (RestoreFilesResponse) {
    }

    /*
    PushFile upload file assets to a sites backup staging area
    */
    rpc PushFileBackup(PushFileBackupRequest) returns (PushFileBackupResponse) {
    }    

    /*
    PushFileStream allows client side streaming of large files to a staged backup area
    */
    rpc PushFileBackupStream(stream PushFileBackupRequest) returns (PushFileBackupResponse) {
    }    

    /*
    PullFileStream streams currently staged file[s] from the server and pulls them down to a local source
    */
    rpc PullFileBackupStream(PullFileBackupRequest) returns (stream PullFileBackupResponse) {
    }

    /*
    DescribeFiles returns the metadata for current files staged for a restore operation
    */
    rpc DescribeFileBackup(DescribeFileBackupRequest) returns (DescribeFileBackupResponse) {
    }

    /*
    Lists file backups known for a provided site
    */
    rpc ListFileBackups(ListFileBackupsRequest) returns (ListFileBackupsResponse) {
    }
}
