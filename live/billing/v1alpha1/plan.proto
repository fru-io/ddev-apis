// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.billing.v1alpha1;

option go_package = "github.com/drud/billing-api/gen/live/billing/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "PlanProto";
option java_package = "com.ddev.live.billing.v1alpha1";

message Plan {

    // Whether the plan can be used for new purchases.
    //
    // @OutputOnly
    string id = 1;

    // Whether the plan can be used for new purchases.
    //
    // @OutputOnly
    bool active = 2;

    // positive integer or zero
    //
    int64 amount = 3;

    // Three-letter ISO currency code, in lowercase. Must be a supported currency
    //
    string currency = 4;

    // The frequency at which a subscription is billed. One of day, week, month or year.
    //
    string interval = 5;

    // Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    //
    map<string, string>  metadata = 6;

    // A brief description of the plan, hidden from customers
    //
    string nickname = 7;

    // The Product whose pricing this plan determines.
    //
    string product = 8;

}

// Message Types

message CreatePlanRequest {
    // The plan to create
    //
    // @Required
    Plan plan = 1;

    // blocking indicates that this call should block until the plan is ready.
    // Subsequent requests will continue to block event if the plan has been created.
    // Failures to create the plan should be cleaned up with DeletePlan.
    // 
    // @Optional
    bool blocking = 16;
}

message CreatePlanResponse {
    // The plan created
    //
    // @OutputOnly
    Plan plan = 1;
}
  
//
message GetPlanRequest {
    // The name of the plan
    //
    // @Required
    string name = 1;
}

//
message GetPlanResponse {
    // The plan
    //
    // @OutputOnly
    Plan plan = 1;
}

// Request message for `Billing.ListPlans`.
message ListPlanRequest {
}

// Response message for `Billing.ListPlans`.
message ListPlanResponse {
    // The list of available plans.
    //
    // @OutputOnly
    repeated Plan plans = 1;
}

//
message UpdatePlanRequest {
    // The updated plan
    //
    // @Required
    Plan plan = 1;

    // blocking indicates that this call should block until the plan is ready.
    // Subsequent requests will continue to block event if the plan has been created.
    // Failures to create the plan should be cleaned up with DeletePlan.
    // 
    // @Optional
    bool blocking = 16;
}

message UpdatePlanResponse {
    // The updated plan
    //
    // @OutputOnly
    Plan plan = 1;
}

message DeletePlanRequest {
    // The plan to delete
    //
    // @Required
    Plan plan = 1;
}

message DeletePlanResponse {
    // The plan deleted
    //
    // @Required
    Plan plan = 1;
}
