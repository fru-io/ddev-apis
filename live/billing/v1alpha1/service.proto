// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.billing.v1alpha1;

import "live/billing/v1alpha1/subscription.proto";
import "live/billing/v1alpha1/customer.proto";
import "live/billing/v1alpha1/workspace.proto";
import "live/billing/v1alpha1/subscriptionitem.proto";

option go_package = "github.com/drud/billing-api/gen/live/billing/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.billing.v1alpha1";

service Billing {

  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {
  }
  
  // Lists the subscriptions of a customer.
  rpc ListSubscriptions(ListSubscriptionRequest) returns (ListSubscriptionResponse) {
  }

  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {
  }

  rpc GetEvents(GetEventRequest) returns (stream SubscriptionEvents) {
  }

}

message GetEventRequest {
}

message SubscriptionEvents {
}

message CreateSubscriptionRequest {
    // The subscription to create
    Subscription subscription = 1;

    Customer customer = 2;

    repeated SubscriptionItem items = 3;

    //TODO: We can either create procedures that block, or add options to block on create
    // and not return until successful in stripe.
    // It is unlikely that all RPC's evalulate to kube objects, such as customer which may have
    //  billing data we only want to pass through to stripe.

    // blocking indicates that this call should block until the subscription is ready.
    // Subsequent requests will continue to block event if the subscription has been created.
    // Failures to create the subscription should be cleaned up with DeleteSubscription.
    bool blocking = 16;
}


message CreateSubscriptionResponse {
    // The subscription created
    Subscription subscription = 2;
}

message DeleteSubscriptionRequest {
    // The subscription to delete
    Subscription subscription = 2;
}

message DeleteSubscriptionResponse {
    // The subscription deleted
    Subscription subscription = 2;
}

// Request message for `Subscriptions.ListSubscriptions`.
message ListSubscriptionRequest {
    Workspace workspace = 1;
}
  
// Response message for `Subscriptions.ListSubscriptions`.
message ListSubscriptionResponse {
    // The subscriptions belonging to the customer account.
    repeated Subscription subscriptions = 1;
}
