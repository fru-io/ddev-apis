// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.billing.v1alpha1;

import "live/billing/v1alpha1/subscription.proto";
import "live/billing/v1alpha1/plan.proto";
import "live/billing/v1alpha1/product.proto";

option go_package = "github.com/drud/billing-api/gen/live/billing/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.billing.v1alpha1";

service Billing {

    // REVIEW:  I am wrapping types in request types, 
    // this allows some more flexibility dealing with the types directly instead of the requests
    // and standardizes calls such as GetSubscription that only would want a Name/Workspace
    // however it may be more simple to return the types directly
    // This pattern is used in coreos dex
    // REF: https://github.com/dexidp/dex/blob/master/api/api.proto


    // SUBSCRIPTIONS

    //
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {
    }

    //
    rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {
    }

    // Lists the subscriptions of a customer.
    rpc ListSubscriptions(ListSubscriptionRequest) returns (ListSubscriptionResponse) {
    }

    //
    rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse) {
    }

    //
    rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {
    }

    // Review: These can be independent services however it may be less user friendly

    // PRODUCTS

    rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
    }

    rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
    }

    // Lists available products.
    rpc ListProduct(ListProductRequest) returns (ListProductResponse) {
    }

    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {
    }

    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {
    }

    // PLANS

    rpc CreatePlan(CreatePlanRequest) returns (CreatePlanResponse) {
    }

    rpc GetPlan(GetPlanRequest) returns (GetPlanResponse) {
    }

    // Lists available products.
    rpc ListPlan(ListPlanRequest) returns (ListPlanResponse) {
    }

    rpc UpdatePlan(UpdatePlanRequest) returns (UpdatePlanResponse) {
    }

    rpc DeletePlan(DeletePlanRequest) returns (DeletePlanResponse) {
    }

}