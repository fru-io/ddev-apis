// Copyright 2020 Drud Technologies.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ddev.billing.v1alpha1;

import "live/billing/v1alpha1/customer.proto";
import "live/billing/v1alpha1/subscription.proto";
import "live/billing/v1alpha1/plan.proto";
import "live/billing/v1alpha1/product.proto";
import "live/billing/v1alpha1/workspace.proto";

option go_package = "github.com/drud/billing-api/gen/live/billing/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.ddev.live.billing.v1alpha1";

service Billing {

    // CUSTOMERS

    //
    rpc CreateCustomer(CreateCustomerRequest) returns (CreateCustomerResponse) {
    }

    //
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {
    }

    rpc ListCustomers(ListCustomerRequest) returns (ListCustomerResponse) {
    }

    //
    rpc UpdateCustomer(UpdateCustomerRequest) returns (UpdateCustomerResponse) {
    }

    // SUBSCRIPTIONS

    //
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {
    }

    //
    rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {
    }

    rpc ListSubscriptions(ListSubscriptionRequest) returns (ListSubscriptionResponse) {
    }

    //
    rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse) {
    }

    // Deprecated.  Cancel a subscription in stripe
    rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse) {
    }
    
    //
    rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {
    }

    // Review: These can be independent services however it may be less user friendly

    // PRODUCTS

    rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
    }

    rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
    }

    rpc ListProduct(ListProductRequest) returns (ListProductResponse) {
    }

    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {
    }

    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {
    }

    // PLANS

    rpc CreatePlan(CreatePlanRequest) returns (CreatePlanResponse) {
    }

    rpc GetPlan(GetPlanRequest) returns (GetPlanResponse) {
    }

    rpc ListPlan(ListPlanRequest) returns (ListPlanResponse) {
    }

    rpc UpdatePlan(UpdatePlanRequest) returns (UpdatePlanResponse) {
    }

    rpc DeletePlan(DeletePlanRequest) returns (DeletePlanResponse) {
    }

    // Workspaces
    
    // ListWorkspaces will return a list of workspaces the user has authorization for
    rpc ListWorkspaces(ListWorkspaceRequest) returns (ListWorkspaceResponse) {
    }

    /* 
    Add an administrator to a workspace.  Requires a workspace administrator token.
    */
    rpc AddWorkspaceAdmin(AddWorkspaceAdminRequest) returns (AddWorkspaceAdminResponse) {       
    }

    /*
    Add a developer to a workspace.   Requires a workspace administrator token.
    */
    rpc AddWorkspaceDeveloper(AddWorkspaceDeveloperRequest) returns (AddWorkspaceDeveloperResponse) {       
    }

    /* 
    Remove an administrator from a workspace.  Requires a workspace administrator token.  An administrator cannot remove themselves.
    */
    rpc DeleteWorkspaceAdmin(DeleteWorkspaceAdminRequest) returns (DeleteWorkspaceAdminResponse) {       
    }

    /* 
    Remove a developer from a workspace.  Requires a workspace administrator token.
    */
    rpc DeleteWorkspaceDeveloper(DeleteWorkspaceDeveloperRequest) returns (DeleteWorkspaceDeveloperResponse) {       
    }

}